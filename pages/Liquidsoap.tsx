
import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { useToast } from '../contexts/ToastContext';
import * as db from '../services/db';
import { Playlist } from '../types';
import InputField from '../components/InputField';
import { CodeIcon, SparklesIcon } from '../components/icons';
import ToggleSwitch from '../components/ToggleSwitch';

const Liquidsoap: React.FC = () => {
    const [serverType, setServerType] = useState<'shoutcast' | 'icecast'>('shoutcast');
    const [host, setHost] = useState('your-server.com');
    const [port, setPort] = useState(8000);
    const [password, setPassword] = useState('your-stream-password');
    const [mount, setMount] = useState('/stream');
    const [stationName, setStationName] = useState('AI Music Station');

    const [playlists, setPlaylists] = useState<Playlist[]>([]);
    const [selectedPlaylists, setSelectedPlaylists] = useState<Set<string>>(new Set());
    const [useJingles, setUseJingles] = useState(false);
    const [jinglesPath, setJinglesPath] = useState('/path/to/your/jingles/');
    const [songsPerJingle, setSongsPerJingle] = useState(3);
    
    const [useCrossfade, setUseCrossfade] = useState(true);
    const [crossfadeDuration, setCrossfadeDuration] = useState(1.5);

    const [useLiveDj, setUseLiveDj] = useState(false);
    const [djPort, setDjPort] = useState(6500);
    const [djPassword, setDjPassword] = useState('your-dj-password');

    const [generatedScript, setGeneratedScript] = useState('');
    
    const { currentUser } = useAuth();
    const { addToast } = useToast();

    useEffect(() => {
        const loadPlaylists = async () => {
            if (currentUser) {
                const loadedPlaylists = await db.getAllPlaylists(currentUser.tenantId);
                setPlaylists(loadedPlaylists);
            }
        };
        loadPlaylists();
    }, [currentUser]);

    const handlePlaylistSelect = (playlistId: string) => {
        setSelectedPlaylists(prev => {
            const newSet = new Set(prev);
            if (newSet.has(playlistId)) {
                newSet.delete(playlistId);
            } else {
                newSet.add(playlistId);
            }
            return newSet;
        });
    };

    const handleGenerateScript = () => {
        const selectedPlaylistObjects = playlists.filter(p => selectedPlaylists.has(p.id));

        const playlistDefinitions = selectedPlaylistObjects.map(p => {
            const playlistVarName = p.name.toLowerCase().replace(/[^a-z0-9_]+/g, '_').replace(/_$/, '');
            return `# Playlist: ${p.name}\n# IMPORTANT: This path is a placeholder. You must create a playlist file\n# on your server with paths to your actual audio files.\n${playlistVarName} = playlist(mode="randomize", "/path/to/your/playlists/${playlistVarName}.pls")`;
        }).join('\n\n');

        const playlistVarNames = selectedPlaylistObjects.map(p => p.name.toLowerCase().replace(/[^a-z0-9_]+/g, '_').replace(/_$/, ''));
        const randomPlaylistSource = playlistVarNames.length > 0 ? `random(id="playlists", [${playlistVarNames.join(', ')}])` : `blank() # No playlists selected, radio will be silent.`;

        let playoutLogic: string;
        let jingleDefinition = '';
        if (useJingles && playlistVarNames.length > 0) {
            jingleDefinition = `
# Jingles folder - replace with your actual path.
jingles = playlist(mode="randomize", "${jinglesPath}")
`;
            playoutLogic = `
# Playout Logic: Rotate between playlists, with a jingle every ${songsPerJingle} songs.
radio = rotate(weights=[1, ${songsPerJingle}], [jingles, ${randomPlaylistSource}])
`;
        } else {
            playoutLogic = `
# Playout Logic: Simple rotation between your selected playlists.
radio = ${randomPlaylistSource}
`;
        }
        
        if (useCrossfade && playlistVarNames.length > 0) {
            playoutLogic += `
# Add crossfade transitions between tracks.
radio = crossfade(${crossfadeDuration}, radio)
`;
        }

        let djInputDefinition = '';
        if (useLiveDj) {
            djInputDefinition = `
# Live DJ Input (Harbor)
# A live DJ can connect to this port using software like BUTT.
live_dj = input.harbor(id="live_dj", port=${djPort}, "${djPassword}")
`;
            playoutLogic += `
# Fallback Logic: When a DJ connects, they take over the stream.
# When they disconnect, the stream falls back to the automated 'radio' source.
radio = fallback(track_sensitive=false, [live_dj, radio])
`;
        }

        const script = `
# Liquidsoap Script Generated by AI Music Station
# Generated at: ${new Date().toLocaleString()}

# --- Output Configuration ---
# Replace with your actual server details.
output.${serverType}(
  %mp3,
  host = "${host}",
  port = ${port},
  password = "${password}",
  mount = "${mount}",
  name = "${stationName}",
  description = "A station powered by AI Music Station",
  genre = "Various"
)

# --- Source Configuration ---
# WARNING: The paths below are placeholders.
# You need to replace them with the actual paths to your audio files
# on the server where Liquidsoap is running.

${playlistDefinitions}
${jingleDefinition}
${djInputDefinition}
${playoutLogic}
# --- Final Output ---
# Apply some basic processing and send to the output.
# This ensures your stream doesn't stop if a source fails.
radio = mksafe(radio)

# The final line of the script is the source to be streamed.
radio
`;
        setGeneratedScript(script.trim());
        addToast("Liquidsoap script generated!", "success");
    };

    const copyToClipboard = () => {
        if (!generatedScript) return;
        navigator.clipboard.writeText(generatedScript).then(() => {
            addToast('Script copied to clipboard!', 'success');
        }, () => {
            addToast('Failed to copy script.', 'error');
        });
    };

    return (
        <div className="grid grid-cols-1 lg:grid-cols-5 gap-8">
            <div className="lg:col-span-2 bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 space-y-6 h-fit">
                <div className="flex items-center space-x-3">
                    <CodeIcon />
                    <h2 className="text-2xl font-bold text-gray-800 dark:text-white">Liquidsoap Script Generator</h2>
                </div>
                <div className="bg-blue-50 dark:bg-gray-700/50 p-4 rounded-lg">
                    <h4 className="font-semibold text-gray-800 dark:text-white">What is Liquidsoap?</h4>
                    <p className="mt-2 text-sm text-gray-600 dark:text-gray-300">
                        Liquidsoap is a powerful scripting language for creating audio streams. You can use it for your own radio station by writing custom scripts to handle playlists, live shows, and audio processing. You will need a separate streaming server, like Icecast or Shoutcast, to relay the audio to listeners.
                    </p>
                    <ul className="mt-2 list-disc list-inside text-sm text-gray-600 dark:text-gray-300 space-y-1">
                        <li><b>Source:</b> The core of a script (audio file, playlist, live input).</li>
                        <li><b>Stream Generator:</b> Combine sources using operators like `playlist()` or `input.harbor()`.</li>
                        <li><b>Output:</b> Specifies where to send the stream (your Icecast/Shoutcast server).</li>
                    </ul>
                </div>
                
                <div className="space-y-4">
                    <h3 className="text-lg font-semibold border-b dark:border-gray-600 pb-2">Output Settings</h3>
                    <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Server Type</label>
                        <select value={serverType} onChange={(e) => setServerType(e.target.value as any)} className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-brand-blue focus:border-brand-blue bg-white dark:bg-gray-700">
                            <option value="shoutcast">Shoutcast</option>
                            <option value="icecast">Icecast</option>
                        </select>
                    </div>
                    <InputField label="Host / IP" name="host" value={host} onChange={e => setHost(e.target.value)} placeholder="your-server.com" />
                    <InputField label="Port" name="port" type="number" value={String(port)} onChange={e => setPort(Number(e.target.value))} placeholder="8000" />
                    <InputField label="Stream Password" name="password" type="password" value={password} onChange={e => setPassword(e.target.value)} placeholder="your-stream-password" />
                    <InputField label="Mount Point" name="mount" value={mount} onChange={e => setMount(e.target.value)} placeholder="/stream" />
                    <InputField label="Station Name" name="stationName" value={stationName} onChange={e => setStationName(e.target.value)} placeholder="My AI Radio" />
                </div>
                
                <div className="space-y-4">
                     <h3 className="text-lg font-semibold border-b dark:border-gray-600 pb-2">Source Playlists</h3>
                     <p className="text-xs text-gray-500 dark:text-gray-400">Select the playlists you want to include in your stream rotation.</p>
                     <div className="space-y-2 max-h-40 overflow-y-auto border dark:border-gray-600 rounded-md p-3">
                        {playlists.length > 0 ? playlists.map(p => (
                            <label key={p.id} className="flex items-center space-x-3 p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer">
                                <input type="checkbox" checked={selectedPlaylists.has(p.id)} onChange={() => handlePlaylistSelect(p.id)} className="h-4 w-4 rounded border-gray-300 text-brand-blue focus:ring-brand-blue" />
                                <span className="text-sm text-gray-800 dark:text-gray-200">{p.name}</span>
                            </label>
                        )) : <p className="text-sm text-gray-500 dark:text-gray-400 text-center">No playlists found.</p>}
                     </div>
                </div>

                <div className="space-y-4">
                     <h3 className="text-lg font-semibold border-b dark:border-gray-600 pb-2">Advanced Playout</h3>
                     <ToggleSwitch label="Play jingles between songs" enabled={useJingles} onChange={setUseJingles} />
                    {useJingles && (
                        <div className="pl-6 space-y-4">
                             <InputField label="Jingles Directory Path" name="jinglesPath" value={jinglesPath} onChange={e => setJinglesPath(e.target.value)} placeholder="/path/to/jingles/" />
                             <InputField label="Songs Per Jingle" name="songsPerJingle" type="number" value={String(songsPerJingle)} onChange={e => setSongsPerJingle(Math.max(1, Number(e.target.value)))} placeholder="3" />
                        </div>
                    )}
                    <ToggleSwitch label="Enable Crossfade" enabled={useCrossfade} onChange={setUseCrossfade} />
                     {useCrossfade && (
                        <div className="pl-6 space-y-4">
                            <InputField label="Crossfade Duration (seconds)" name="crossfadeDuration" type="number" value={String(crossfadeDuration)} onChange={e => setCrossfadeDuration(Math.max(0.1, Number(e.target.value)))} placeholder="1.5" />
                        </div>
                    )}
                    <ToggleSwitch label="Enable Live DJ Input (Harbor)" enabled={useLiveDj} onChange={setUseLiveDj} />
                    {useLiveDj && (
                        <div className="pl-6 space-y-4">
                             <InputField label="DJ Harbor Port" name="djPort" type="number" value={String(djPort)} onChange={e => setDjPort(Number(e.target.value))} placeholder="6500" />
                             <InputField label="DJ Harbor Password" name="djPassword" type="password" value={djPassword} onChange={e => setDjPassword(e.target.value)} placeholder="your-dj-password" />
                        </div>
                    )}
                </div>

                <button onClick={handleGenerateScript} className="w-full flex items-center justify-center px-4 py-2 bg-purple-600 text-white font-semibold rounded-lg shadow-md hover:bg-purple-700 focus:outline-none">
                    <SparklesIcon className="h-5 w-5 mr-2" />
                    Generate Script
                </button>
            </div>
            <div className="lg:col-span-3 bg-gray-900 rounded-lg shadow-lg p-6 flex flex-col">
                 <div className="flex justify-between items-center mb-4">
                    <h3 className="text-lg font-semibold text-gray-200">Generated Script</h3>
                    <button onClick={copyToClipboard} disabled={!generatedScript} className="px-4 py-2 text-sm bg-gray-700 text-white rounded-lg hover:bg-gray-600 disabled:bg-gray-800 disabled:text-gray-500 disabled:cursor-not-allowed">
                        Copy Script
                    </button>
                 </div>
                 <textarea value={generatedScript} readOnly placeholder="Your generated Liquidsoap script will appear here..." className="flex-grow w-full p-4 font-mono text-sm bg-black/50 text-green-300 border border-gray-700 rounded-md focus:outline-none resize-none"/>
            </div>
        </div>
    );
};

export default Liquidsoap;
